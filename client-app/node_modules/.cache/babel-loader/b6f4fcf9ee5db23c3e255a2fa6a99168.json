{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mlaistar\\\\source\\\\vs_code\\\\Reactivities\\\\client-app\\\\src\\\\app\\\\layout\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashoard';\nimport agent from '../api/agent';\nimport LoadingComponent from './LoadingComponent';\nimport { useStore } from '../stores/store';\nimport { observer } from 'mobx-react-lite';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default _c2 = observer(_c = _s(function App() {\n  _s();\n\n  const {\n    activityStore\n  } = useStore();\n  const [activities, setActivities] = useState([]);\n  const [submitting, setSubmitting] = useState(false);\n  useEffect(() => {\n    activityStore.loadActivities();\n  }, [activityStore]);\n\n  function handleDeleteActivity(id) {\n    setSubmitting(true);\n    agent.Activities.delete(id).then(() => {\n      setActivities([...activities.filter(x => x.id !== id)]);\n      setSubmitting(false);\n    });\n  } // function handleCreateOrEditActivity(activity: Activity) {\n  //   setSubmitting(true);\n  //   if(activity.id){\n  //     agent.Activities.update(activity).then(() => {\n  //       setActivities([...activities.filter(x=>x.id!==activity.id), activity])\n  //       setSelectedActivity(activity);\n  //       setEditMode(false);\n  //       setSubmitting(false);\n  //     })\n  //   }\n  //   else {\n  //     activity.id = uuid();\n  //       agent.Activities.create(activity).then(() => {\n  //       setActivities([...activities, activity]);  \n  //       setSelectedActivity(activity);\n  //       setEditMode(false);\n  //       setSubmitting(false);\n  //     })\n  //   }\n  // activity.id \n  // ? setActivities([...activities.filter(x=>x.id!==activity.id), activity])\n  // : setActivities([...activities, {...activity, id: uuid()}]);\n  // setEditMode(false);\n  // setSelectedActivity(activity);\n  //}\n\n\n  if (activityStore.loadingInitial) return /*#__PURE__*/_jsxDEV(LoadingComponent, {\n    content: \"Loading app\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 44\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        marginTop: '7em'\n      },\n      children: /*#__PURE__*/_jsxDEV(ActivityDashboard, {\n        activities: activityStore.activities,\n        deleteActivity: handleDeleteActivity,\n        submitting: submitting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}, \"B6Z5nYo4lEL3F9HVSmhC8kyAI7Y=\", false, function () {\n  return [useStore];\n})); //export default observer(App);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$observer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Mlaistar/source/vs_code/Reactivities/client-app/src/app/layout/App.tsx"],"names":["React","useEffect","useState","Container","NavBar","ActivityDashboard","agent","LoadingComponent","useStore","observer","App","activityStore","activities","setActivities","submitting","setSubmitting","loadActivities","handleDeleteActivity","id","Activities","delete","then","filter","x","loadingInitial","marginTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,iBAAP,MAA8B,sDAA9B;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,QAAT,QAAyB,iBAAzB;;;AAEA,qBAAeA,QAAQ,SAAC,SAASC,GAAT,GAAe;AAAA;;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAqBH,QAAQ,EAAnC;AAEA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAa,EAAb,CAA5C;AAEA,QAAK,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA3C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,aAAa,CAACK,cAAd;AACH,GAFQ,EAEN,CAACL,aAAD,CAFM,CAAT;;AAIA,WAASM,oBAAT,CAA8BC,EAA9B,EAA0C;AACxCH,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAT,IAAAA,KAAK,CAACa,UAAN,CAAiBC,MAAjB,CAAwBF,EAAxB,EAA4BG,IAA5B,CAAiC,MAAM;AACrCR,MAAAA,aAAa,CAAC,CAAC,GAAGD,UAAU,CAACU,MAAX,CAAkBC,CAAC,IAAEA,CAAC,CAACL,EAAF,KAAOA,EAA5B,CAAJ,CAAD,CAAb;AACAH,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAHD;AAKD,GAlBoC,CAoBrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACA;AAEA;AACA;AACF;;;AAEA,MAAGJ,aAAa,CAACa,cAAjB,EAAkC,oBAAO,QAAC,gBAAD;AAAkB,IAAA,OAAO,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,UAAP;AAElC,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEI,QAAC,SAAD;AAAW,MAAA,KAAK,EAAE;AAACC,QAAAA,SAAS,EAAE;AAAZ,OAAlB;AAAA,6BACI,QAAC,iBAAD;AACA,QAAA,UAAU,EAAEd,aAAa,CAACC,UAD1B;AAEA,QAAA,cAAc,EAAEK,oBAFhB;AAGA,QAAA,UAAU,EAAEH;AAHZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADF;AAWD,CA5DsB;AAAA,UACMN,QADN;AAAA,GAAvB,C,CA8DA","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport { Activity } from '../models/activity';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashoard';\nimport agent from '../api/agent';\nimport LoadingComponent from './LoadingComponent';\nimport { useStore } from '../stores/store';\nimport { observer } from 'mobx-react-lite';\n\nexport default observer(function App() {\n  const { activityStore } =  useStore();\n\n  const [activities, setActivities] = useState<Activity[]>([]);\n\n  const[submitting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n      activityStore.loadActivities();\n  }, [activityStore])\n\n  function handleDeleteActivity(id: string) {\n    setSubmitting(true);\n    agent.Activities.delete(id).then(() => {\n      setActivities([...activities.filter(x=>x.id!==id)]);\n      setSubmitting(false);\n    })\n    \n  }\n\n  // function handleCreateOrEditActivity(activity: Activity) {\n  //   setSubmitting(true);\n  //   if(activity.id){\n  //     agent.Activities.update(activity).then(() => {\n  //       setActivities([...activities.filter(x=>x.id!==activity.id), activity])\n  //       setSelectedActivity(activity);\n  //       setEditMode(false);\n  //       setSubmitting(false);\n  //     })\n  //   }\n  //   else {\n  //     activity.id = uuid();\n  //       agent.Activities.create(activity).then(() => {\n  //       setActivities([...activities, activity]);  \n  //       setSelectedActivity(activity);\n  //       setEditMode(false);\n  //       setSubmitting(false);\n  //     })\n  //   }\n    // activity.id \n    // ? setActivities([...activities.filter(x=>x.id!==activity.id), activity])\n    // : setActivities([...activities, {...activity, id: uuid()}]);\n    \n    // setEditMode(false);\n    // setSelectedActivity(activity);\n  //}\n\n  if(activityStore.loadingInitial)  return <LoadingComponent content='Loading app' />\n\n  return (\n    <>\n      <NavBar />\n        <Container style={{marginTop: '7em'}}>\n            <ActivityDashboard \n            activities={activityStore.activities}\n            deleteActivity={handleDeleteActivity}\n            submitting={submitting} />\n        </Container>\n    </>\n  );\n})\n\n//export default observer(App);\n"]},"metadata":{},"sourceType":"module"}