{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from '../api/agent';\nimport { v4 as uuid } from 'uuid';\nexport default class ActivityStore {\n  //activities: Activity[] = [];\n  constructor() {\n    this.activityRegistry = new Map();\n    this.selectedActivity = undefined;\n    this.editMode = false;\n    this.loading = false;\n    this.loadingInitial = false;\n\n    this.loadActivities = async () => {\n      this.setLoadingInit(true);\n\n      try {\n        const activities = await agent.Activities.list();\n        activities.forEach(activity => {\n          activity.date = activity.date.split('T')[0];\n          this.activityRegistry.set(activity.id, activity); // mutate state in\n          //#region Redux is an immutable state management system, but blowbacks is not that kind of library, Moakes creates mutable objects that we can and should mutate directly. \n          //It does not use immutable structures so we can mutate our states inside our method here.\n          //#endregion\n        });\n        this.setLoadingInit(false);\n      } catch (error) {\n        console.log(error);\n        this.setLoadingInit(false);\n      }\n    };\n\n    this.setLoadingInit = state => {\n      this.loadingInitial = state;\n    };\n\n    this.selectActivity = id => {\n      this.selectedActivity = this.activityRegistry.get(id);\n    };\n\n    this.cancelSelectedActivity = () => {\n      this.selectedActivity = undefined;\n    };\n\n    this.openForm = id => {\n      id ? this.selectActivity(id) : this.cancelSelectedActivity();\n      this.editMode = true;\n    };\n\n    this.closeForm = () => {\n      this.editMode = false;\n    };\n\n    this.createActivity = async activity => {\n      this.loading = true;\n      activity.id = uuid();\n\n      try {\n        await agent.Activities.create(activity);\n        runInAction(() => {\n          this.activityRegistry.set(activity.id, activity);\n          this.selectedActivity = activity;\n          this.editMode = false;\n          this.loading = false;\n        });\n      } catch (error) {\n        console.log(error);\n        runInAction(() => {\n          this.loading = false;\n        });\n      }\n    };\n\n    this.updateActivity = async activity => {\n      this.loading = true;\n\n      try {\n        await agent.Activities.update(activity);\n        runInAction(() => {\n          //this.activities = [...this.activities.filter(x => x.id === activity.id), activity];\n          this.activityRegistry.set(activity.id, activity);\n          this.selectedActivity = activity;\n          this.editMode = false;\n          this.loading = false;\n        });\n      } catch (error) {\n        console.log(error);\n        runInAction(() => {\n          this.loading = false;\n        });\n      }\n    };\n\n    this.deleteActivity = async id => {\n      this.loading = true;\n\n      try {\n        await agent.Activities.delete(id);\n        runInAction(() => {\n          var _this$selectedActivit;\n\n          //this.activities = [...this.activities.filter(x => x.id !== id)];\n          this.activityRegistry.delete(id);\n          if (((_this$selectedActivit = this.selectedActivity) === null || _this$selectedActivit === void 0 ? void 0 : _this$selectedActivit.id) === id) this.cancelSelectedActivity();\n          this.loading = false;\n        });\n      } catch (error) {\n        console.log(error);\n        runInAction(() => {\n          this.loading = false;\n        });\n      }\n    };\n\n    makeAutoObservable(this);\n  }\n\n  get ActivitiesByDate() {\n    return Array.from(this.activityRegistry.values()).sort((a, b) => Date.parse(a.date) - Date.parse(b.date));\n  } // either use promises or async awaits.\n\n\n}","map":{"version":3,"sources":["C:/Users/Mlaistar/source/vs_code/Reactivities/client-app/src/app/stores/activityStore.ts"],"names":["makeAutoObservable","runInAction","agent","v4","uuid","ActivityStore","constructor","activityRegistry","Map","selectedActivity","undefined","editMode","loading","loadingInitial","loadActivities","setLoadingInit","activities","Activities","list","forEach","activity","date","split","set","id","error","console","log","state","selectActivity","get","cancelSelectedActivity","openForm","closeForm","createActivity","create","updateActivity","update","deleteActivity","delete","ActivitiesByDate","Array","from","values","sort","a","b","Date","parse"],"mappings":"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","sourcesContent":["import { Activity } from './../models/activity';\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from '../api/agent';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport default class ActivityStore {\r\n    //activities: Activity[] = [];\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode =  false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\nget ActivitiesByDate() {\r\n  return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n        Date.parse(a.date) - Date.parse(b.date))  ;\r\n}\r\n\r\n    // either use promises or async awaits.\r\n    loadActivities = async () => {\r\n        this.setLoadingInit(true);\r\n\r\n        try {\r\n            \r\n            const activities = await agent.Activities.list();\r\n            activities.forEach(activity => {\r\n                activity.date = activity.date.split('T')[0]\r\n                this.activityRegistry.set(activity.id, activity); // mutate state in\r\n                    //#region Redux is an immutable state management system, but blowbacks is not that kind of library, Moakes creates mutable objects that we can and should mutate directly. \r\n                    //It does not use immutable structures so we can mutate our states inside our method here.\r\n                    //#endregion\r\n              })\r\n              this.setLoadingInit(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInit(false);\r\n        }\r\n\r\n    }\r\n\r\n    setLoadingInit = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n    \r\n    selectActivity = (id: string) => {\r\n        this.selectedActivity = this.activityRegistry.get(id);\r\n    }\r\n\r\n    cancelSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    openForm = (id?: string) => {\r\n        id ? this.selectActivity(id) : this.cancelSelectedActivity();\r\n        this.editMode = true;\r\n    }\r\n\r\n    closeForm = () => {\r\n        this.editMode = false;\r\n    }\r\n\r\n    createActivity = async (activity: Activity) => {\r\n        \r\n        this.loading = true;\r\n        activity.id = uuid();\r\n\r\n        try {\r\n\r\n            await agent.Activities.create(activity);\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.selectedActivity = activity;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: Activity) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                //this.activities = [...this.activities.filter(x => x.id === activity.id), activity];\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.selectedActivity = activity;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n\r\n            })\r\n\r\n        } catch(error) {\r\n            console.log(error)\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                //this.activities = [...this.activities.filter(x => x.id !== id)];\r\n                this.activityRegistry.delete(id);\r\n                if(this.selectedActivity?.id === id) this.cancelSelectedActivity();\r\n                this.loading = false;\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}