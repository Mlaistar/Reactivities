{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mlaistar\\\\source\\\\vs_code\\\\Reactivities\\\\client-app\\\\src\\\\app\\\\layout\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashoard';\nimport { v4 as uuid } from 'uuid';\nimport agent from '../api/agent';\nimport LoadingComponent from './LoadingComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [activities, setActivities] = useState([]);\n  const [selectedActivity, setSelectedActivity] = useState(undefined);\n  const [editMode, setEditMode] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [submiting, setSubmitting] = useState(false);\n  useEffect(() => {\n    agent.Activities.list().then(response => {\n      let activities = [];\n      response.forEach(activity => {\n        activity.date = activity.date.split('T')[0];\n        activities.push(activity);\n      });\n      setActivities(activities);\n      setLoading(false);\n    });\n  }, []);\n\n  function handleDeleteActivity(id) {\n    setActivities([...activities.filter(x => x.id !== id)]);\n  }\n\n  function handleSelectActivity(id) {\n    setSelectedActivity(activities.find(x => x.id === id));\n  }\n\n  function handleCancelSelectActivity() {\n    setSelectedActivity(undefined);\n  }\n\n  function handleFormOpen(id) {\n    id ? handleSelectActivity(id) : handleCancelSelectActivity();\n    setEditMode(true);\n  }\n\n  function handleFormClose() {\n    setEditMode(false);\n  }\n\n  function handleCreateOrEditActivity(activity) {\n    setSubmitting(true);\n\n    if (activity.id) {\n      agent.Activities.update(activity).then(() => {\n        setActivities([...activities.filter(x => x.id !== activity.id), activity]);\n        setSelectedActivity(activity);\n        setEditMode(false);\n        setSubmitting(false);\n      });\n    } else {\n      activity.id = uuid();\n      agent.Activities.create(activity).then(() => {\n        setActivities([...activities, activity]);\n        setSelectedActivity(activity);\n        setEditMode(false);\n        setSubmitting(false);\n      });\n    } // activity.id \n    // ? setActivities([...activities.filter(x=>x.id!==activity.id), activity])\n    // : setActivities([...activities, {...activity, id: uuid()}]);\n    // setEditMode(false);\n    // setSelectedActivity(activity);\n\n  }\n\n  if (loading) return /*#__PURE__*/_jsxDEV(LoadingComponent, {\n    content: \"Loading app\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      openForm: handleFormOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      style: {\n        marginTop: '7em'\n      },\n      children: /*#__PURE__*/_jsxDEV(ActivityDashboard, {\n        activities: activities,\n        selectedActivity: selectedActivity,\n        selectActivity: handleSelectActivity,\n        cancelSelectActivity: handleCancelSelectActivity,\n        editMode: editMode,\n        openForm: handleFormOpen,\n        closeForm: handleFormClose,\n        createOrEdit: handleCreateOrEditActivity,\n        deleteActivity: handleDeleteActivity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"jtAEqi18TPBeed7xQghvBeVn1oQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Mlaistar/source/vs_code/Reactivities/client-app/src/app/layout/App.tsx"],"names":["React","useEffect","useState","Container","NavBar","ActivityDashboard","v4","uuid","agent","LoadingComponent","App","activities","setActivities","selectedActivity","setSelectedActivity","undefined","editMode","setEditMode","loading","setLoading","submiting","setSubmitting","Activities","list","then","response","forEach","activity","date","split","push","handleDeleteActivity","id","filter","x","handleSelectActivity","find","handleCancelSelectActivity","handleFormOpen","handleFormClose","handleCreateOrEditActivity","update","create","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport { Activity } from '../models/activity';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashoard';\nimport { v4 as uuid } from 'uuid';\nimport agent from '../api/agent';\nimport LoadingComponent from './LoadingComponent';\n\nfunction App() {\n  const [activities, setActivities] = useState<Activity[]>([]);\n  const [selectedActivity, setSelectedActivity] = useState<Activity | undefined>(undefined);\n  const [editMode, setEditMode] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const[submiting, setSubmitting] = useState(false);\n\n  useEffect(() => {\n    agent.Activities.list()\n         .then(response => {\n          let activities: Activity[] = [];\n          response.forEach(activity => {\n            activity.date = activity.date.split('T')[0]\n            activities.push(activity);\n          })\n           setActivities(activities);\n           setLoading(false);\n        })\n  }, [])\n\n  function handleDeleteActivity(id: string) {\n    setActivities([...activities.filter(x=>x.id!==id)]);\n  }\n\n  function handleSelectActivity(id: string) {\n      setSelectedActivity(activities.find(x => x.id === id));\n  }\n\n  function handleCancelSelectActivity() {\n    setSelectedActivity(undefined);\n  }\n\n  function handleFormOpen(id?: string) {\n    id ? handleSelectActivity(id) : handleCancelSelectActivity();\n    setEditMode(true);\n\n  }\n\n  function handleFormClose() {\n    setEditMode(false);\n  }\n\n  function handleCreateOrEditActivity(activity: Activity) {\n    setSubmitting(true);\n    if(activity.id){\n      agent.Activities.update(activity).then(() => {\n        setActivities([...activities.filter(x=>x.id!==activity.id), activity])\n        setSelectedActivity(activity);\n        setEditMode(false);\n        setSubmitting(false);\n      })\n    }\n    else {\n      activity.id = uuid();\n        agent.Activities.create(activity).then(() => {\n        setActivities([...activities, activity]);  \n        setSelectedActivity(activity);\n        setEditMode(false);\n        setSubmitting(false);\n      })\n    }\n    // activity.id \n    // ? setActivities([...activities.filter(x=>x.id!==activity.id), activity])\n    // : setActivities([...activities, {...activity, id: uuid()}]);\n    \n    // setEditMode(false);\n    // setSelectedActivity(activity);\n  }\n\n  if(loading)  return <LoadingComponent content='Loading app' />\n\n  return (\n    <>\n      <NavBar openForm={handleFormOpen} />\n        <Container style={{marginTop: '7em'}}>\n            <ActivityDashboard \n            activities={activities}\n            selectedActivity={selectedActivity}\n            selectActivity={handleSelectActivity}\n            cancelSelectActivity={handleCancelSelectActivity}\n            editMode={editMode}\n            openForm={handleFormOpen}\n            closeForm={handleFormClose}\n            createOrEdit={handleCreateOrEditActivity} \n            deleteActivity={handleDeleteActivity} />\n        </Container>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}