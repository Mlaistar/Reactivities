{"ast":null,"code":"import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from '../api/agent';\nimport { v4 as uuid } from 'uuid';\nexport default class ActivityStore {\n  constructor() {\n    this.activities = [];\n    this.selectedActivity = undefined;\n    this.editMode = false;\n    this.loading = false;\n    this.loadingInitial = false;\n\n    this.loadActivities = async () => {\n      this.setLoadingInit(true);\n\n      try {\n        const activities = await agent.Activities.list();\n        activities.forEach(activity => {\n          activity.date = activity.date.split('T')[0];\n          activities.push(activity); // mutate state in\n          //#region Redux is an immutable state management system, but blowbacks is not that kind of library, Moakes creates mutable objects that we can and should mutate directly. \n          //It does not use immutable structures so we can mutate our states inside our method here.\n          //#endregion\n        });\n        this.setLoadingInit(false);\n      } catch (error) {\n        console.log(error);\n        this.setLoadingInit(false);\n      }\n    };\n\n    this.setLoadingInit = state => {\n      this.loadingInitial = state;\n    };\n\n    this.selectActivity = id => {\n      this.selectedActivity = this.activities.find(x => x.id === id);\n    };\n\n    this.cancelSelectedActivity = () => {\n      this.selectedActivity = undefined;\n    };\n\n    this.openForm = id => {\n      id ? this.selectActivity(id) : this.cancelSelectedActivity();\n      this.editMode = true;\n    };\n\n    this.closeForm = () => {\n      this.editMode = false;\n    };\n\n    this.createActivity = async activity => {\n      this.loading = true;\n      activity.id = uuid();\n\n      try {\n        await agent.Activities.create(activity);\n        runInAction(() => {\n          this.activities.push(activity);\n          this.selectedActivity = activity;\n          this.editMode = false;\n          this.loading = false;\n        });\n      } catch (error) {\n        console.log(error);\n        runInAction(() => {\n          this.loading = false;\n        });\n      }\n    };\n\n    this.updateActivity = async activity => {\n      this.loading = true;\n\n      try {\n        await agent.Activities.update(activity);\n        runInAction(() => {\n          this.activities = [...this.activities.filter(x => x.id === activity.id), activity];\n          this.selectedActivity = activity;\n          this.editMode = false;\n          this.loading = false;\n        });\n      } catch (error) {\n        console.log(error);\n        runInAction(() => {\n          this.loading = false;\n        });\n      }\n    };\n\n    this.deleteActivity = async id => {\n      this.loading = true;\n\n      try {\n        await agent.Activities.delete(id);\n        runInAction(() => {\n          var _this$selectedActivit;\n\n          this.activities = [...this.activities.filter(x => x.id !== id)];\n          if (((_this$selectedActivit = this.selectedActivity) === null || _this$selectedActivit === void 0 ? void 0 : _this$selectedActivit.id) === id) this.cancelSelectedActivity();\n          this.loading = false;\n        });\n      } catch (error) {\n        console.log(error);\n        runInAction(() => {\n          this.loading = false;\n        });\n      }\n    };\n\n    makeAutoObservable(this);\n  } // either use promises or async awaits.\n\n\n}","map":{"version":3,"sources":["C:/Users/Mlaistar/source/vs_code/Reactivities/client-app/src/app/stores/activityStore.ts"],"names":["makeAutoObservable","runInAction","agent","v4","uuid","ActivityStore","constructor","activities","selectedActivity","undefined","editMode","loading","loadingInitial","loadActivities","setLoadingInit","Activities","list","forEach","activity","date","split","push","error","console","log","state","selectActivity","id","find","x","cancelSelectedActivity","openForm","closeForm","createActivity","create","updateActivity","update","filter","deleteActivity","delete"],"mappings":"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","sourcesContent":["import { Activity } from './../models/activity';\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from '../api/agent';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport default class ActivityStore {\r\n    activities: Activity[] = [];\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode =  false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    // either use promises or async awaits.\r\n    loadActivities = async () => {\r\n        this.setLoadingInit(true);\r\n\r\n        try {\r\n            \r\n            const activities = await agent.Activities.list();\r\n            activities.forEach(activity => {\r\n            activity.date = activity.date.split('T')[0]\r\n            activities.push(activity); // mutate state in\r\n                //#region Redux is an immutable state management system, but blowbacks is not that kind of library, Moakes creates mutable objects that we can and should mutate directly. \r\n                //It does not use immutable structures so we can mutate our states inside our method here.\r\n                //#endregion\r\n              })\r\n              this.setLoadingInit(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInit(false);\r\n        }\r\n\r\n    }\r\n\r\n    setLoadingInit = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n    \r\n    selectActivity = (id: string) => {\r\n        this.selectedActivity = this.activities.find(x => x.id === id);\r\n    }\r\n\r\n    cancelSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    openForm = (id?: string) => {\r\n        id ? this.selectActivity(id) : this.cancelSelectedActivity();\r\n        this.editMode = true;\r\n    }\r\n\r\n    closeForm = () => {\r\n        this.editMode = false;\r\n    }\r\n\r\n    createActivity = async (activity: Activity) => {\r\n        \r\n        this.loading = true;\r\n        activity.id = uuid();\r\n\r\n        try {\r\n\r\n            await agent.Activities.create(activity);\r\n            runInAction(() => {\r\n                this.activities.push(activity);\r\n                this.selectedActivity = activity;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: Activity) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                this.activities = [...this.activities.filter(x => x.id === activity.id), activity];\r\n                this.selectedActivity = activity;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n\r\n            })\r\n\r\n        } catch(error) {\r\n            console.log(error)\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activities = [...this.activities.filter(x => x.id !== id)];\r\n                if(this.selectedActivity?.id === id) this.cancelSelectedActivity();\r\n                this.loading = false;\r\n\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}